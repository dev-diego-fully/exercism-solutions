--- A simple module that provides responses to various types of messages.
local bob = {}

local is_scream, is_question, is_silence

--- Bob's responses mapped to different types of input.
local responses <const> = {
    questions = "Sure",
    yells = "Whoa, chill out!",
    yelling_questions = "Calm down, I know what I'm doing!",
    silences = "Fine, be that way.",
    no_category = "Whatever"
}

--- Returns Bob's response to the input message.
--- @param say string The message to be analyzed.
--- @return string The response generated by Bob.
function bob.hey(say)
    if is_silence(say) then
        return responses.silences
    end

    local msg_is_scream = is_scream(say)
    local msg_is_question = is_question(say)

    if msg_is_scream and msg_is_question then
        return responses.yelling_questions
    elseif msg_is_scream then
        return responses.yells
    elseif msg_is_question then
        return responses.questions
    else
        return responses.no_category
    end
end

--- Returns whether the message is silent. A message is considered silent
--- if it is empty or contains only whitespace characters.
--- @param msg string The message to check.
--- @return boolean True if the message is silent; otherwise, false.
function is_silence(msg)
    return msg:match("^%s*$")
end

--- Returns whether the message is a question. A message is a question
--- if it ends with a question mark, optionally followed by whitespace.
--- @param msg string The message to check.
--- @return boolean True if the message is a question; otherwise, false.
function is_question(msg)
    return msg:match("%s*?$")
end

--- Returns whether the message is a shout. A message is a shout if it contains
--- at least one uppercase letter and no lowercase letters.
--- @param msg string The message to check.
--- @return boolean True if the message is a shout; otherwise, false.
function is_scream(msg)
    return msg:match("%u") and not msg:match("%l")
end

return bob